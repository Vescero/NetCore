using System;                   // Подлючение пространства имён

namespace Mass                  // Объявление пространства имён
{
    class Program               // Объявление нового класса 
    {
        static void Main()      // Объявление нового метода
        {
            /* Массив представляет набор однотипных данных. Объявление массива похоже на
             * объявление переменной но после указания типа ставяться квадратные скобки .*/
            int[] numbers;
            /* После опредления переменной массива мы можем присвоить ей значение. Мы 
             объявили массив nums, который будет хранить данные типа int, далее используя
            операцию new, мы выделяем память для 4 элементов массива: new int[4]. 4 будет
            длинной массива. При таком определении все элементы получат значения по умолчанию
            , которое предусмотрено для их типа. Для int значение 0. */
            int[] nums = new int[4];
            /* Так же мы можем указать значения для этих элементов. Все перечисленные способы
             * будут равноценны. */
            int[] nums2 = new int[4] { 1, 2, 3, 5 };
            int[] nums3 = new int[] { 1, 2, 3, 5 };
            int[] nums4 = new[] { 1, 2, 3, 5 };
            int[] nums5 = { 1, 2, 3, 5 };
            /* Для обращения к элементам массива используются индексы. Индекс представляет
             * номер элемента в массиве, при этом нумерация начинается с 0, поэтому индекс
             первого элемента будет равен 0. Что бы обратьтся к 4 элементу, надо использовать
            индекс 3. Если попытаться обратиться к 6 элементу то получим исключение OutOfRange*/
            int[] nums6 = new int[4];
            nums6[0] = 1;
            nums6[1] = 2;
            nums6[2] = 3;
            nums6[3] = 5;
            Console.WriteLine(nums6[3]); // 5
            Console.WriteLine("--- Конец примера 1 ---");
            /* Для перебора массивов используются циклы. 
             ForEach*/
            int[] numbers2 = new int[] { 1, 2, 3, 4, 5 };
            foreach (int i in numbers2)
            {
                Console.WriteLine(i);
            }
            Console.WriteLine("--- Конец примера 2 ---");
            /*For*/
            int[] numbers3 = new int[] { 1, 2, 3, 4, 5 };
            for (int i = 0; i < numbers3.Length; i++)
            {
                Console.WriteLine(numbers3[i]);
            }
            Console.WriteLine("--- Конец примера 3 ---");
            /* Цикл for более гибкий по сравнению с forEach. Если ForEach последовательно
             * извлекает элементы массива и только для чтения, то в цикле for мы можем перескакивать
             на несколько элементов вперёд в зависимости от счётчика, а так же можем изменять элементы*/
            int[] numbers4 = new int[] { 1, 2, 3, 5 };
            for (int i = 0; i < numbers4.Length; i++)
            {
                numbers4[i] = numbers4[i] * 2;
                Console.WriteLine(numbers4[i]);
            }
            Console.WriteLine("--- Конец примера 4 ---");

            /* Многомерные массивы 
             Массивы характеризуются понятием ранг или количество измерений. Ранее были 
            массивы имеющие одно измерение такие массивы можно представить в виде горизонального
            ряда элементов. Но массивы бывают и многомерными. Массивы имеющие 2 измерения называют
            двумерными*/
            int[] nums7 = new int[] { 0, 1, 2, 3, 4, 5 };
            int[,] nums8 = { { 0, 1, 2 }, { 3, 4, 5 } };
            /* Визуально их можно представить как
             * одномерный nums7 - 0 1 2 3 4 5 
             * двумерный nums8  - 0 1 2
                                  3 4 5 
            Поскольку массив двумерный, он представляет собой простую таблицу. Двумерные
            массивы можно определить следующим образом: */
            int[,] nums9;
            int[,] nums10 = new int[2, 3];
            int[,] nums11 = new int[2, 3] { { 0, 1, 2 }, { 3, 4, 5 } };
            int[,] nums12 = new int[,] { { 0, 1, 2 }, { 3, 4, 5 } };
            int[,] nums13 = new[,] { { 0, 1, 2 }, { 3, 4, 5 } };
            int[,] nums14 = { { 0, 1, 2 }, { 3, 4, 5 } };
            /* Массивы могут иметь и больше измерений. Объявление трёхмерного массива
             * могло бы выглядеть так: */
            int[,,] nums15 = new int[2, 3, 4];
            /* Определённую сложность может представлять перебор многомерного массива.
             * Нужно учитывать что длина такого массива - это совокупное количество элементов. */
            int[,] mas = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }, { 10, 11, 12 } };
            foreach (int i in mas)
                Console.Write($"{i} ");
            Console.WriteLine();
            Console.WriteLine("--- Конец примера 5 ---");
            /* Если нужно пробежаться по каждой строке в таблице нужно получить количество
             * элементов размерности. У каждого массива если метода GetUpperBound(dimension)*
             * который возвращает индекс последнего элемента в размерности. Если массив двумерный
             *  то первая размерность с индексом 0 по сути и есть таблица .С помощью выражения
             * mas.GetUppeBound(0)+1 можно получить количество строк таблицы, представленной 
             * двухмерным массивом. А через mas.Lenght/rows можно получить количество элементов 
             * в каждой строке: */
            int[,] mas2 = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 }, { 10, 11, 12 } };
            int rows = mas2.GetUpperBound(0) + 1;
            Console.WriteLine($" Количество строк в массиве: {rows}");
            // Общее количество элементов массива делится на количество строк
            int columns = mas2.Length / rows;
            // или так
            // int columns = mas2.GetUpperBound(1)+1;           
            Console.WriteLine($" Количество столбцов в массиве: {columns}");
            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < columns; j++)
                {
                    Console.Write($"{mas2[i, j]}\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("--- Конец примера 6 ---");

            /* Массив массивов. Зубчатый массив. */
            int[][] nums17 = new int[3][];
            nums17[0] = new int[2] { 1, 2 };
            nums17[1] = new int[3] { 1, 2, 3 };
            nums17[2] = new int[5] { 1, 2, 3, 4, 5 };
            /* Здесь две группы квадратных скобок указывают, что это массив массивов, то есть
             * массив, который содержит в себе другие массивы. Длина массива указывается только
             в первых квадратных скобках, все последующие квадратные скобки должны быть пусты:
            new int [3][]. В данном случае у нас массив nums17 содержит 3 массива. Причём размерность
            у каждого из этих массивов может не совпадать. Причём мы можем использовать в
            качестве массивов и многомерные: */
            int[][,] nums18 = new int[3][,]
            {
                new int[,] {{1, 2},{3, 4} },
                new int[,] {{1, 2},{3, 6} },
                new int[,] {{1, 2},{3, 5},{8, 13}}
            };
            /* Здесь у нас массив из трёх массивов, при чём каждый из них двумерный массив.
             * Используя вложенные циклы, можно перебирать зубчатые массивы */
            foreach (int[] row in nums17)
            {
                foreach (int number in row)
                {
                    Console.Write($"{number} \t");
                }
                Console.WriteLine();
            }
            /* Или с помощью цикла for */
            for (int i =0; i<nums17.Length;i++)
            {
                for (int j=0; j<nums17[i].Length;j++)
                {
                    Console.Write($"{nums17[i][j]} \t");
                }
                Console.WriteLine();
            }
            Console.WriteLine("--- Конец примера 7 ---");
            /* Основные понятия 
             Ранг - количество измерений массива
            Длина измерения - длина отдельного измеренения массива
            Длина массива - количество всех элементов массива */
            int[,] numbers20 = new int[3, 4];
            /* Массив двумерный, т.е имеет 2 измерения поэтому его ранг равен 2.
             * Длина первого измирения 3(этаж), длина второго измерения 4(комнат).
             Длина массива т.е общее количество элементов 12*/

            /* Задачи */

            /* Количество положительных чисел в массиве */
            int[] numbers21 = { -4, -3, -2, -1, 0, 1, 2, 3, 4 };
            int result = 0;
            foreach (int number in numbers21)
            {
                if (number>0)
                {
                    Console.WriteLine($"Число {number} в массиве положительное. ");
                    result++;
                }
            }
            Console.WriteLine($"Количество положительных числе в массиве {result}");
            Console.WriteLine("--- Конец задачи 1 ---");

            /* Инверсия массива */
            int[] numbers22 = { -4, -3, -2, -1, 0, 2, 4, 6, 8 };
            int n = numbers22.Length; // Длина массива
            int k = n / 2;            // Середина массива
            int temp;                 // Элемент для обмена
            for (int i=0; i<k; i++)
            {
                temp = numbers22[i];
                numbers22[i] = numbers22[n - i - 1];
                numbers22[n - i - 1] = temp;             
            }
            foreach (int i in numbers22)
            {
                Console.Write($"{i}\t");
            }
            /* Поскольку нужно изменить элементы массива, то для этого используется цикл for.
             * Алгорим решения задачи подразумевает перебор элементов до середины массива,
             которая в программе представлена переменной k, и обмен значений элемента, который
            имеет индекс i с элементом с индексом n-i-1;*/

        }                       // Конец объявления метода Main
    }                           // Конец объявления класса
}                               // Конец объявления пространства имён
