using System;                                       // Подключение пространства имён

namespace Methods                                   // Объявление нового пространства имён
{
    class Program                                   // Объявление нового класса
    {
        /* По умолчанию программа на c# должна содержать как минимум один метод - метод Main
         * который является точкой входа в приложение. Ключевое слово static является 
         модификатором, далее идёт типо возвращаемого значения. В данном случае void указывает
        на то, что метод ничего не возвращает. Далее идёт название метода Main и в скобках
        параметры -string[] args. И в фигурные скобки заключено тело метода - все действия
        которые он выполняет. */
        static void Main(string[] args)             // Объявление нового метода
        {
            SayHello();
            SayGoodBye();                           // Вызов методов
            /* Результат методов, которые возвращают значение, мы можем присвоить переменным
             * или использовать иным образом в программе. Метод GetHello возвращает значение
             string. Поэтому мы можем присвоить это значение какой-нибудь переменной типа 
            string: string message = GetHello(); Второй метод GetSum возвращает значение типа
            int, поэтому его можно присвоить переменной, которая принимает значение этого
            типа: int sum=GetSum()*/
            string message = GetHello();
            int sum = GetSum();
            Console.WriteLine(message);
            Console.WriteLine(sum);
        }                                           // Конец объявления метода Main

        /* Оба метода определены в рамках класса Program, они имеют модификтор static, а
         * в качестве возвращаемого типа для них определён тип void. То есть данные методы
         ничего не возвращают, просто произовдят некоторые действия. Так же оба метода не 
        имеют никаких параметров, поэтому после названия метода указаны пустые скобки.*/
        static void SayHello()
        {
            int hour = 23;
            if (hour > 22)
            {
                /* Однако мы можем использовать оператор return и в методах с типом void.
                 * В этом случае после оператора return не ставится никакого возвращаемого
                 значения (ведь метод ничего не возвращает). Типичная ситуация - в зависимости
                от определённых условий произвести выход и метода.*/
                return;
            }
            else
            {
                Console.WriteLine("Hello");
            }
        }
        static void SayGoodBye()
        {
            Console.WriteLine("GoodBye");
        }
        /* Возвращаемые значения */
        /* Метод может возвращать значение, какой-либо результат. В примере выше были
         * определены два метода, которые имели тип void. Методы с таким типом не возвращают
         никакого значения. Они просто выполняют некоторые действия. 
        Если метод имеет любой другой тип, отличный от void, то такой метод обязан вернуть
        значение этого типа. Для этого применяется оператор return, после которого идёт
        возвращаемое значение. */
        static string GetHello()
        {
            /* Оператор retun не только возвращает значение, но и производит выход из метода.
             * Поэтому он должен определяться после остальных инструкций. Инструкция afterReturn
             не имеет смысла - она никогда не выполнится, так как до её выполнения оператор return
            возвратит значение и произведёт выход и метода.*/
            return "Hello";
            Console.WriteLine("After return");
        }
        static int GetSum()
        {
            int x = 2;
            int y = 3;
            int z = x + y;
            return z;
        }
        /* Метод GetHello имеет тип string, следовательно, он должен возвратить строку. 
         * Поэтому в теле метода используется оператор retсле которого указана возвращаемая 
         * строка. Метод GetSum имеет тип int, следовательно, он должен возвратить значение 
         типа int - целое число. Поэтому в теле метода используется оператор return, после
        которого указано возвращаемое число (в данному случае результат суммы переменных x и y)*/

        /* Сокращенная запись методов.
         * Если метод определяет только одну инструкцию, то мы можем сократить опеределение метода.*/
        static void SayHi()
        {
            Console.WriteLine("Hi");
        }
        /* можно сократить следующим образом */
        static void SayHoy() => Console.WriteLine("Hoy");
        /* После списка параметров ставится знак равно и больше чем, после которого идёт
         * выполняемая инструкция. Подобным образом можно сокращать методы, 
         * которые возращают значения */
        static string GetHi()
        {
            return "Hi";
        }
        /* Аналогичек методу */
        static string GetHoy() => "Hoy";

    }                                               // Конец объявление класса Program
}                                                   // Конец объявления пространства имён
